using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Runtime.CompilerServices;
using System.Windows.Controls;

using OelianderUI.Contracts.Views;
using OelianderUI.Core.Contracts.Services;
using OelianderUI.Core.Models;
using OelianderUI.Helpers;
using Microsoft.Win32;
using System.Windows.Markup;
using System.Diagnostics;
using System.Windows;
using ControlzEx.Standard;
using Newtonsoft.Json;
using Renci.SshNet.Messages;
using System.Reflection;
using OelianderUI.Helpers.Exploits;

namespace OelianderUI.Views;

public partial class ExploitScannerPage : Page, INotifyPropertyChanged
{
    #region locals

    public ScanHelper helperObject { get; set; }
    internal static bool ShodanScan = false;
    internal static string _targetingString = "";
    public ObservableCollection<ScanResult> Source { get; } = new();
    public List<string> collectedCredentials = new();
    public List<string> rosVersion = new();
    public static Dictionary<Helpers.User, string> _staticList = new();
    public bool SaveShodanOnly = false; 
    private static int _tabulation = 0; 
    internal static Settings settings = new();
    public static List<CollectionListing> _collectionList = new();
    private readonly ReaderWriterLockSlim _readWriteLock = new();
    private Thread exploitThread;

    #endregion locals

    public void AddLog(string text)
    {
        try
        {
            Dispatcher.Invoke(() =>
            {
                LogBox.AppendText(text + Environment.NewLine);
            });
        }
        catch (Exception E)
        {
            Objects.obj.HandleException(E);
        }
    }
    public void AddToLogFile(string text)
    {
        Thread.Sleep(1000);
        _readWriteLock.EnterWriteLock();
        try
        {
            var resultPath = Directory.GetCurrentDirectory() + "\\Oeilander.log";
            using StreamWriter st = File.AppendText(resultPath);
            st.WriteLine(text);
        }
        finally
        {
            _readWriteLock.ExitWriteLock();
        }
    }
    public void AddLog(string text, object obj)
    {
        try
        {
            Dispatcher.Invoke(() =>
            {
                LogBox.AppendText(text + Environment.NewLine);
            });
        }
        catch (Exception E)
        {
            Objects.obj.HandleException(E);
        }
    }
    public ExploitScannerPage() //IScanResultService scanResultService)
    {
        //_scanResults = scanResultService;
        InitializeComponent();
        DataContext = this;
        Objects.exploitScannerPage = this;
        if (!File.Exists("Oeliander.log")) { File.Create("Oeliander.log"); }
        exploitOption.ItemsSource = ExpOptions.ExploitOptions;
    }
    public void ScanStop()
    {
        Dispatcher.Invoke(() =>
        {
            StartScanButton.Content = "Start";
            AddLog(Environment.NewLine + Objects.GetTime() + ": Scan stopped successfully\n");
            AddToLogFile("\n\n\t[*] End of Scan: " + Objects.GetTime() + "\n\n###############################################################################\n\n");
        });
        try
        {
            // Use a cancellation token to signal the thread to stop
            var cts = new CancellationTokenSource();
            cts.Cancel();
            exploitThread.Join(); // Wait for the thread to finish
        }
        catch (Exception ex)
        {
            Objects.ShowAlert("Thread Error", ex.ToString(), 2);
            Objects.obj.HandleException(ex);
        }
    }
    
    public void OnNavigatedFrom()
    {
    }

    public event PropertyChangedEventHandler PropertyChanged;

    private void Set<T>(ref T storage, T value, [CallerMemberName] string propertyName = null)
    {
        if (Equals(storage, value))
        {
            return;
        }

        storage = value;
        OnPropertyChanged(propertyName);
    }

    private void OnPropertyChanged(string propertyName) => PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));

    private void GetLogs(object sender, RoutedEventArgs e)
    {
        Process.Start("explorer", "Oeliander.log");
    }
    private void CheckResults(object sender, RoutedEventArgs e)
    {
        Process.Start("explorer", ".\\Results");
    }
    private void ClearLogs(object sender, RoutedEventArgs e)
    {
        File.WriteAllText("Oeliander.log", "Oeliander Exploit Logs\n--------------------------------\n\n");
    }
    
    private void StartScan(object sender, System.Windows.RoutedEventArgs e)
    {
        if (StartScanButton.Content.ToString() == "Start")
        {
            helperObject.SaveScanTime();
            GC.Collect();
            GC.WaitForPendingFinalizers();
            switch (exploitOption.SelectedItem.ToString().ToLower())
            {
                case "springshell rce":
                    AddLog(SpringCoreRCE.banner);
                    exploitThread = new Thread(() => SpringCoreRCE.ScanForSpringCoreRCE(TargetTextBox.Text));
                    break;
                case "f5bigip rce":
                    AddLog(F5Helper.banner);
                    exploitThread = new Thread(() => F5Helper.TryExploitF5(TargetTextBox.Text, proxyAddressBox.Text));
                    break;
                case "openfire rce":
                    AddLog(OpenFireAuthBypass.banner);
                    exploitThread = new Thread(() => OpenFireAuthBypass.ScanForOpenFireRCE(TargetTextBox.Text));
                    break;
                case "openssh rce":
                    AddLog(OpenSSHServerVuln.banner);
                    exploitThread = new Thread(() => OpenSSHServerVuln.ScanForSSHVuln(TargetTextBox.Text));
                    break;
                case "junipersrx rce":
                    AddLog(JuniperSRX.banner);
                    exploitThread = new Thread(() => JuniperSRX.ScanForJuniperVuln(TargetTextBox.Text));
                    break;
                case "kibana rce":
                    AddLog(KibanaExploit.banner);
                    exploitThread = new Thread(() => KibanaExploit.ScanForKibanaRCE(TargetTextBox.Text));
                    break;
                case "apacheofbiz rce":
                    AddLog(ApacheOFBIZ.banner);
                    //var domain = Objects.obj.OpenDialogWindowWithResult("Target Domain", "Please enter a target domain for scanning");
                    //exploitThread = new Thread(() => ApacheOFBIZ.ScanForApacheOfBiz(domain, TargetTextBox.Text, true));
                    exploitThread = new Thread(() => ApacheOFBIZ.ScanForApacheOfBiz(TargetTextBox.Text, TargetTextBox.Text, string.IsNullOrEmpty(proxyAddressBox.Text) ? proxyAddressBox.Text : (string)null, false));
                    break;
                default:
                    Objects.ShowAlert("ERROR", "No Vulnearbility Selected for Scan", 2);
                    return;
            }
            exploitThread.Start();
        }
        else if (StartScanButton.Content.ToString() == "Stop")
        {
            //helperObject.Stop();
            ScanStop();
        }
    }
}
